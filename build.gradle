plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'org.Little_100'
version = '0.2.1'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven {
        url = uri("https://repo.opencollab.dev/main/")
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly("dev.folia:folia-api:1.20.1-R0.1-SNAPSHOT")
    implementation("org.xerial:sqlite-jdbc:3.45.1.0")
    compileOnly('org.geysermc.geyser:api:2.8.3-SNAPSHOT')
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    duplicatesStrategy = 'include'

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.yml'
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: version])
    }
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.zip'
    }
    from(sourceSets.main.resources.srcDirs) {
        include '**/plugin.yml'
    }
}

task verifyResourcesExist {
    doLast {
        def buildDir = file("${buildDir}/resources/main")
        def requiredFiles = [
            'en_us.yml',
            'zh_cn.yml',
            'config.yml',
            'plugin.yml',
            'pack/ProjectE Resourcepack.zip'
        ]
        
        requiredFiles.each { fileName ->
            def resourceFile = new File(buildDir, fileName)
            if (!resourceFile.exists()) {
                throw new GradleException("Required file '${fileName}' does not exist in the output resources!")
            } else {
                println "${fileName} exists in the output resources"
            }
        }
    }
}

processResources.finalizedBy(verifyResourcesExist)
